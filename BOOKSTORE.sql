--
-- File generated with SQLiteStudio v3.2.1 on Thu Dec 17 15:21:16 2020
--
-- Text encoding used: System
--
PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

-- Table: AUTHOR
CREATE TABLE AUTHOR (
  ID INTEGER  NOT NULL  ,
  FULL_NAME VARCHAR    ,
  EMAIL VARCHAR      ,
PRIMARY KEY(ID));

-- Table: BOOK
CREATE TABLE BOOK (
  ID INTEGER  NOT NULL  ,
  PUBLISHING_HOUSE_ID INTEGER  NOT NULL  ,
  WAREHOUSE_ID INTEGER  NOT NULL  ,
  TITLE VARCHAR    ,
  PRICE FLOAT    ,
  YEAR_2 YEAR    ,
  ISBN INTEGER    ,
  QUANTITY INTEGER      ,
PRIMARY KEY(ID)    ,
  FOREIGN KEY(WAREHOUSE_ID)
    REFERENCES WAREHOUSE(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(PUBLISHING_HOUSE_ID)
    REFERENCES PUBLISHING_HOUSE(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);

-- Table: BOOK_has_AUTHOR
CREATE TABLE BOOK_has_AUTHOR (
  BOOK_ID INTEGER  NOT NULL  ,
  AUTHOR_ID INTEGER  NOT NULL    ,
PRIMARY KEY(BOOK_ID, AUTHOR_ID)    ,
  FOREIGN KEY(BOOK_ID)
    REFERENCES BOOK(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(AUTHOR_ID)
    REFERENCES AUTHOR(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);

-- Table: CONTACT_NUMBER
CREATE TABLE CONTACT_NUMBER (
  CUSTOMER_ID INTEGER  NOT NULL  ,
  NUMBER INTEGER  NOT NULL    ,
  FOREIGN KEY(CUSTOMER_ID)
    REFERENCES CUSTOMER(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);

-- Table: CONTACT_NUMBER_2
CREATE TABLE CONTACT_NUMBER_2 (
  PUBLISHING_HOUSE_ID INTEGER  NOT NULL  ,
  NUMBER INTEGER  NOT NULL    ,
  FOREIGN KEY(PUBLISHING_HOUSE_ID)
    REFERENCES PUBLISHING_HOUSE(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);

-- Table: CUSTOMER
CREATE TABLE CUSTOMER (
  ID INTEGER  NOT NULL  ,
  NAME VARCHAR    ,
  SURNAME VARCHAR    ,
  FATHERS_NAME VARCHAR    ,
  CITY VARCHAR    ,
  STREET VARCHAR    ,
  NUMBER INTEGER    ,
  ZIP_CODE INTEGER    ,
  EMAIL VARCHAR      ,
PRIMARY KEY(ID));

-- Table: PUBLISHING_HOUSE
CREATE TABLE PUBLISHING_HOUSE (
  ID INTEGER  NOT NULL  ,
  NAME VARCHAR    ,
  ADDRESS VARCHAR    ,
  URL VARCHAR      ,
PRIMARY KEY(ID));

-- Table: SHOPPING_CART
CREATE TABLE SHOPPING_CART (
  ID INTEGER  NOT NULL  ,
  CUSTOMER_ID INTEGER  NOT NULL  ,
  DATE DATE      ,
PRIMARY KEY(ID)  ,
  FOREIGN KEY(CUSTOMER_ID)
    REFERENCES CUSTOMER(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);

-- Table: SHOPPING_CART_has_BOOK
CREATE TABLE SHOPPING_CART_has_BOOK (
  SHOPPING_CART_ID INTEGER  NOT NULL  ,
  BOOK_ID INTEGER  NOT NULL  ,
  PRICE FLOAT    ,
  TITLE VARCHAR      ,
PRIMARY KEY(SHOPPING_CART_ID, BOOK_ID)    ,
  FOREIGN KEY(SHOPPING_CART_ID)
    REFERENCES SHOPPING_CART(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION,
  FOREIGN KEY(BOOK_ID)
    REFERENCES BOOK(ID)
      ON DELETE NO ACTION
      ON UPDATE NO ACTION);

-- Table: WAREHOUSE
CREATE TABLE WAREHOUSE (
  ID INTEGER  NOT NULL  ,
  CITY VARCHAR    ,
  STREET VARCHAR    ,
  NUMBER INTEGER    ,
  ZIP_CODE INTEGER    ,
  CONTACT_NUMBER INTEGER      ,
PRIMARY KEY(ID));

-- Index: BOOK_FKIndex1
CREATE INDEX BOOK_FKIndex1 ON BOOK (WAREHOUSE_ID);

-- Index: BOOK_FKIndex2
CREATE INDEX BOOK_FKIndex2 ON BOOK (PUBLISHING_HOUSE_ID);

-- Index: BOOK_has_AUTHOR_FKIndex1
CREATE INDEX BOOK_has_AUTHOR_FKIndex1 ON BOOK_has_AUTHOR (BOOK_ID);

-- Index: BOOK_has_AUTHOR_FKIndex2
CREATE INDEX BOOK_has_AUTHOR_FKIndex2 ON BOOK_has_AUTHOR (AUTHOR_ID);

-- Index: CONTACT_NUMBER_2_FKIndex1
CREATE INDEX CONTACT_NUMBER_2_FKIndex1 ON CONTACT_NUMBER_2 (PUBLISHING_HOUSE_ID);

-- Index: CONTACT_NUMBER_FKIndex1
CREATE INDEX CONTACT_NUMBER_FKIndex1 ON CONTACT_NUMBER (CUSTOMER_ID);

-- Index: SHOPPING_CART_FKIndex1
CREATE INDEX SHOPPING_CART_FKIndex1 ON SHOPPING_CART (CUSTOMER_ID);

-- Index: SHOPPING_CART_has_BOOK_FKIndex1
CREATE INDEX SHOPPING_CART_has_BOOK_FKIndex1 ON SHOPPING_CART_has_BOOK (SHOPPING_CART_ID);

-- Index: SHOPPING_CART_has_BOOK_FKIndex2
CREATE INDEX SHOPPING_CART_has_BOOK_FKIndex2 ON SHOPPING_CART_has_BOOK (BOOK_ID);

COMMIT TRANSACTION;
PRAGMA foreign_keys = on;
